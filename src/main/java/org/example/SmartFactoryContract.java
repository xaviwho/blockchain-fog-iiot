package org.example;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.RawTransactionManager;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * Java wrapper for the SmartFactoryContract. 
 * This is a simplified version of what web3j would generate.
 */
public class SmartFactoryContract extends Contract {
    
    // Shortened bytecode placeholder - in actual deployment, replace with the real bytecode
    private static final String BINARY = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550612492806100b86000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c8063857406871161008c578063af186af211610066578063af186af214610227578063af70eb8714610259578063d7e5dfdc14610289578063dc478dd0146102bc576100cf565b806385740687146101bd5780638da5cb5b146101ed5780639c5d32671461020b576100cf565b80630536e4a4146100d45780631f042746146101075780634216c17714610139578063550eb56b146101555780635b9f570a14610171578063619cbd821461018d575b600080fd5b6100ee60048036038101906100e991906113d0565b6102d8565b6040516100fe949392919061149c565b60405180910390f35b610121600480360381019061011c919061162b565b6104b0565b60405161013093929190611674565b60405180910390f35b610153600480360381019061014e9190611710565b6105a5565b005b61016f600480360381019061016a919061173d565b61068e565b005b61018b60048036038101906101869190611710565b6107c3565b005b6101a760048036038101906101a29190611710565b61093a565b6040516101b491906117f7565b60405180910390f35b6101d760048036038101906101d29190611812565b61095a565b6040516101e4919061186e565b60405180910390f35b6101f56109a1565b6040516102029190611898565b60405180910390f35b610225600480360381019061022091906118b3565b6109c5565b005b610241600480360381019061023c919061162b565b610a94565b60405161025093929190611674565b60405180910390f35b610273600480360381019061026e919061162b565b610b5c565b604051610280919061186e565b60405180910390f35b6102a3600480360381019061029e919061196e565b610b87565b6040516102b39493929190611ba7565b60405180910390f35b6102d660048036038101906102d19190611c08565b611184565b005b600381815481106102e857600080fd5b906000526020600020906004020160009150905080600001805461030b90611d22565b80601f016020809104026020016040519081016040528092919081815260200182805461033790611d22565b80156103845780601f1061035957610100808354040283529160200191610384565b820191906000526020600020905b81548152906001019060200180831161036757829003601f168201915b50505050509080600101805461039990611d22565b80601f01602080910402602001604051908101604052809291908181526020018280546103c590611d22565b80156104125780601f106103e757610100808354040283529160200191610412565b820191906000526020600020905b8154815290600101906020018083116103f557829003601f168201915b50505050509080600201805461042790611d22565b80601f016020809104026020016040519081016040528092919081815260200182805461045390611d22565b80156104a05780601f10610475576101008083540402835291602001916104a0565b820191906000526020600020905b81548152906001019060200180831161048357829003601f168201915b5050505050908060030154905084565b606060008060006001856040516104c79190611d8f565b90815260200160405180910390206040518060600160405290816000820180546104f090611d22565b80601f016020809104026020016040519081016040528092919081815260200182805461051c90611d22565b80156105695780601f1061053e57610100808354040283529160200191610569565b820191906000526020600020905b81548152906001019060200180831161054c57829003601f168201915b50505050508152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509193909250565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90611e18565b60405180910390fd5b6001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661071a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071190611e84565b60405180910390fd5b6040518060600160405280848152602001838152602001828152506001856040516107459190611d8f565b908152602001604051809103902060008201518160000190816107689190612050565b5060208201518160010155604082015181600201559050507f5399ebc32c32da8018e808aae7fee85b196deed89bdd91cc844f733b89c33567848484846040516107b59493929190612122565b60405180910390a150505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610851576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084890611e18565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d6906121c1565b60405180910390fd5b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60046020528060005260406000206000915054906101000a900460ff1681565b600282805160208101820180518482526020830160208501208183528095505050505050818154811061098c57600080fd5b90600052602060002001600091509150505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890611e84565b60405180910390fd5b7fbc36f06d0f69f4e6c45643516d3d510be6e5a24f6370151bf81e184c2f556fc584848484604051610a8694939291906121e1565b60405180910390a150505050565b600181805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610acd90611d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610af990611d22565b8015610b465780601f10610b1b57610100808354040283529160200191610b46565b820191906000526020600020905b815481529060010190602001808311610b2957829003601f168201915b5050505050908060010154908060020154905083565b6000600282604051610b6e9190611d8f565b9081526020016040518091039020805490509050919050565b6060806060806000600288604051610b9f9190611d8f565b9081526020016040518091039020805480602002602001604051908101604052809291908181526020018280548015610bf757602002820191906000526020600020905b815481526020019060010190808311610be3575b5050505050905080518710610d4b57600067ffffffffffffffff811115610c2157610c20611500565b5b604051908082528060200260200182016040528015610c5457816020015b6060815260200190600190039081610c3f5790505b50600067ffffffffffffffff811115610c7057610c6f611500565b5b604051908082528060200260200182016040528015610ca357816020015b6060815260200190600190039081610c8e5790505b50600067ffffffffffffffff811115610cbf57610cbe611500565b5b604051908082528060200260200182016040528015610cf257816020015b6060815260200190600190039081610cdd5790505b50600067ffffffffffffffff811115610d0e57610d0d611500565b5b604051908082528060200260200182016040528015610d3c5781602001602082028036833780820191505090505b5094509450945094505061117b565b600086905081518789610d5e919061226a565b1115610d7457878251610d71919061229e565b90505b8067ffffffffffffffff811115610d8e57610d8d611500565b5b604051908082528060200260200182016040528015610dc157816020015b6060815260200190600190039081610dac5790505b5095508067ffffffffffffffff811115610dde57610ddd611500565b5b604051908082528060200260200182016040528015610e1157816020015b6060815260200190600190039081610dfc5790505b5094508067ffffffffffffffff811115610e2e57610e2d611500565b5b604051908082528060200260200182016040528015610e6157816020015b6060815260200190600190039081610e4c5790505b5093508067ffffffffffffffff811115610e7e57610e7d611500565b5b604051908082528060200260200182016040528015610eac5781602001602082028036833780820191505090505b50925060005b8181101561117757600083828b610ec9919061226a565b81518110610eda57610ed96122d2565b5b60200260200101519050600060038281548110610efa57610ef96122d2565b5b9060005260206000209060040201604051806080016040529081600082018054610f2390611d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4f90611d22565b8015610f9c5780601f10610f7157610100808354040283529160200191610f9c565b820191906000526020600020905b815481529060010190602001808311610f7f57829003601f168201915b50505050508152602001600182018054610fb590611d22565b80601f0160208091040260200160405190810160405280929190818152602001828054610fe190611d22565b801561102e5780601f106110035761010080835404028352916020019161102e565b820191906000526020600020905b81548152906001019060200180831161101157829003601f168201915b5050505050815260200160028201805461104790611d22565b80601f016020809104026020016040519081016040528092919081815260200182805461107390611d22565b80156110c05780601f10611095576101008083540402835291602001916110c0565b820191906000526020600020905b8154815290600101906020018083116110a357829003601f168201915b50505050508152602001600382015481525050905080600001518984815181106110ed576110ec6122d2565b5b602002602001018190525080602001518884815181106111105761110f6122d2565b5b60200260200101819052508060400151878481518110611133576111326122d2565b5b60200260200101819052508060600151868481518110611156576111556122d2565b5b6020026020010181815250505050808061116f90612301565b915050610eb2565b5050505b93509350935093565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611210576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120790611e84565b60405180910390fd5b6000600380549050905060036040518060800160405280878152602001868152602001858152602001848152509080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161127b9190612050565b5060208201518160010190816112919190612050565b5060408201518160020190816112a79190612050565b506060820151816003015550506002866040516112c49190611d8f565b90815260200160405180910390208190806001815401808255809150506001900390600052602060002001600090919091909150557f6fe738490344379ae7c46c5560137a8f4b1185c0ec88b8a32dd3efd73ecb674e8686868686604051611330959493929190612349565b60405180910390a16102ee82111561137e577fbc36f06d0f69f4e6c45643516d3d510be6e5a24f6370151bf81e184c2f556fc586848460405161137593929190612404565b60405180910390a15b505050505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6113ad8161139a565b81146113b857600080fd5b50565b6000813590506113ca816113a4565b92915050565b6000602082840312156113e6576113e5611390565b5b60006113f4848285016113bb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561143757808201518184015260208101905061141c565b60008484015250505050565b6000601f19601f8301169050919050565b600061145f826113fd565b6114698185611408565b9350611479818560208601611419565b61148281611443565b840191505092915050565b6114968161139a565b82525050565b600060808201905081810360008301526114b68187611454565b905081810360208301526114ca8186611454565b905081810360408301526114de8185611454565b90506114ed606083018461148d565b95945050505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61153882611443565b810181811067ffffffffffffffff8211171561155757611556611500565b5b80604052505050565b600061156a611386565b9050611576828261152f565b919050565b600067ffffffffffffffff82111561159657611595611500565b5b61159f82611443565b9050602081019050919050565b82818337600083830152505050565b60006115ce6115c98461157b565b611560565b9050828152602081018484840111156115ea576115e96114fb565b5b6115f58482856115ac565b509392505050565b600082601f830112611612576116116114f6565b5b81356116228482602086016115bb565b91505092915050565b60006020828403121561164157611640611390565b5b600082013567ffffffffffffffff81111561165f5761165e611395565b5b61166b848285016115fd565b91505092915050565b6000606082019050818103600083015261168e8186611454565b905061169d602083018561148d565b6116aa604083018461148d565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116dd826116b2565b9050919050565b6116ed816116d2565b81146116f857600080fd5b50565b60008135905061170a816116e4565b92915050565b60006020828403121561172657611725611390565b5b6000611734848285016116fb565b91505092915050565b6000806000806080858703121561175757611756611390565b5b600085013567ffffffffffffffff81111561177557611774611395565b5b611781878288016115fd565b945050602085013567ffffffffffffffff8111156117a2576117a1611395565b5b6117ae878288016115fd565b93505060406117bf878288016113bb565b92505060606117d0878288016113bb565b91505092959194509250565b60008115159050919050565b6117f1816117dc565b82525050565b600060208201905061180c60008301846117e8565b92915050565b6000806040838503121561182957611828611390565b5b600083013567ffffffffffffffff81111561184757611846611395565b5b611853858286016115fd565b9250506020611864858286016113bb565b9150509250929050565b6000602082019050611883600083018461148d565b92915050565b611892816116d2565b82525050565b60006020820190506118ad6000830184611889565b92915050565b600080600080608085870312156118cd576118cc611390565b5b600085013567ffffffffffffffff8111156118eb576118ea611395565b5b6118f7878288016115fd565b945050602085013567ffffffffffffffff81111561191857611917611395565b5b611924878288016115fd565b9350506040611935878288016113bb565b925050606085013567ffffffffffffffff81111561195657611955611395565b5b611962878288016115fd565b91505092959194509250565b60008060006060848603121561198757611986611390565b5b600084013567ffffffffffffffff8111156119a5576119a4611395565b5b6119b1868287016115fd565b93505060206119c2868287016113bb565b92505060406119d3868287016113bb565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611a25826113fd565b611a2f8185611a09565b9350611a3f818560208601611419565b611a4881611443565b840191505092915050565b6000611a5f8383611a1a565b905092915050565b6000602082019050919050565b6000611a7f826119dd565b611a8981856119e8565b935083602082028501611a9b856119f9565b8060005b85811015611ad75784840389528151611ab88582611a53565b9450611ac383611a67565b925060208a01995050600181019050611a9f565b50829750879550505050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611b1e8161139a565b82525050565b6000611b308383611b15565b60208301905092915050565b6000602082019050919050565b6000611b5482611ae9565b611b5e8185611af4565b9350611b6983611b05565b8060005b83811015611b9a578151611b818882611b24565b9750611b8c83611b3c565b925050600181019050611b6d565b5085935050505092915050565b60006080820190508181036000830152611bc18187611a74565b90508181036020830152611bd58186611a74565b90508181036040830152611be98185611a74565b90508181036060830152611bfd8184611b49565b905095945050505050565b600080600080600060a08688031215611c2457611c23611390565b5b600086013567ffffffffffffffff811115611c4257611c41611395565b5b611c4e888289016115fd565b955050602086013567ffffffffffffffff811115611c6f57611c6e611395565b5b611c7b888289016115fd565b945050604086013567ffffffffffffffff811115611c9c57611c9b611395565b5b611ca8888289016115fd565b935050606086013567ffffffffffffffff811115611cc957611cc8611395565b5b611cd5888289016115fd565b9250506080611ce6888289016113bb565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611d3a57607f821691505b602082108103611d4d57611d4c611cf3565b5b50919050565b600081905092915050565b6000611d69826113fd565b611d738185611d53565b9350611d83818560208601611419565b80840191505092915050565b6000611d9b8284611d5e565b915081905092915050565b7f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60008201527f6374696f6e000000000000000000000000000000000000000000000000000000602082015250565b6000611e02602583611408565b9150611e0d82611da6565b604082019050919050565b60006020820190508181036000830152611e3181611df5565b9050919050565b7f4e6f7420617574686f72697a6564000000000000000000000000000000000000600082015250565b6000611e6e600e83611408565b9150611e7982611e38565b602082019050919050565b60006020820190508181036000830152611e9d81611e61565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611f067fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611ec9565b611f108683611ec9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611f4d611f48611f438461139a565b611f28565b61139a565b9050919050565b6000819050919050565b611f6783611f32565b611f7b611f7382611f54565b848454611ed6565b825550505050565b600090565b611f90611f83565b611f9b818484611f5e565b505050565b5b81811015611fbf57611fb4600082611f88565b600181019050611fa1565b5050565b601f82111561200457611fd581611ea4565b611fde84611eb9565b81016020851015611fed578190505b612001611ff985611eb9565b830182611fa0565b50505b505050565b600082821c905092915050565b600061202760001984600802612009565b1980831691505092915050565b60006120408383612016565b9150826002028217905092915050565b612059826113fd565b67ffffffffffffffff81111561207257612071611500565b5b61207c8254611d22565b612087828285611fc3565b600060209050601f8311600181146120ba57600084156120a8578287015190505b6120b28582612034565b86555061211a565b601f1984166120c886611ea4565b60005b828110156120f0578489015182556001820191506020850194506020810190506120cb565b8683101561210d5784890151612109601f891682612016565b8355505b6001600288020188555050505b505050505050565b6000608082019050818103600083015261213c8187611454565b905081810360208301526121508186611454565b905061215f604083018561148d565b61216c606083018461148d565b95945050505050565b7f43616e6e6f742072656d6f7665206f776e657200000000000000000000000000600082015250565b60006121ab601383611408565b91506121b682612175565b602082019050919050565b600060208201905081810360008301526121da8161219e565b9050919050565b600060808201905081810360008301526121fb8187611454565b9050818103602083015261220f8186611454565b905061221e604083018561148d565b81810360608301526122308184611454565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006122758261139a565b91506122808361139a565b92508282019050808211156122985761229761223b565b5b92915050565b60006122a98261139a565b91506122b48361139a565b92508282039050818111156122cc576122cb61223b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061230c8261139a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361233e5761233d61223b565b5b600182019050919050565b600060a08201905081810360008301526123638188611454565b905081810360208301526123778187611454565b9050818103604083015261238b8186611454565b9050818103606083015261239f8185611454565b90506123ae608083018461148d565b9695505050505050565b7f4869676820616e6f6d616c792073636f72652064657465637465640000000000600082015250565b60006123ee601b83611408565b91506123f9826123b8565b602082019050919050565b6000608082019050818103600083015261241e8186611454565b905081810360208301526124328185611454565b9050612441604083018461148d565b8181036060830152612452816123e1565b905094935050505056fea264697066735822122019f4237fe9a8c7737615aebef4380ca8f790f4b78795fa6a20e769dc8b2cd1f464736f6c63430008130033"; 
    
    /**
     * Constructor for contract deployment
     */
    protected SmartFactoryContract(String contractAddress, Web3j web3j, Credentials credentials, 
                                  ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, credentials, gasProvider);
    }
    
    /**
     * Constructor with transaction manager
     */
    protected SmartFactoryContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, 
                                  ContractGasProvider gasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, gasProvider);
    }
    
    /**
     * Deploy a new contract with chain ID
     */
    public static SmartFactoryContract deploy(Web3j web3j, Credentials credentials,
                                             ContractGasProvider gasProvider) throws Exception {
        // Create transaction manager with chain ID
        TransactionManager txManager = new RawTransactionManager(
            web3j, 
            credentials, 
            BlockchainConfig.CHAIN_ID // Use the correct chain ID for replay protection
        );
        
        return SmartFactoryContract.deploy(web3j, txManager, gasProvider);
    }
    
    /**
     * Deploy with transaction manager
     */
    public static SmartFactoryContract deploy(Web3j web3j, TransactionManager transactionManager,
                                            ContractGasProvider gasProvider) throws Exception {
        return deployRemoteCall(
            SmartFactoryContract.class,
            web3j,
            transactionManager,
            gasProvider,
            BINARY,
            ""
        ).send();
    }
    
    /**
     * Load an existing contract
     */
    public static SmartFactoryContract load(String contractAddress, Web3j web3j, 
                                           Credentials credentials, ContractGasProvider gasProvider) {
        // Create transaction manager with chain ID
        TransactionManager txManager = new RawTransactionManager(
            web3j, 
            credentials, 
            BlockchainConfig.CHAIN_ID // Use the correct chain ID for replay protection
        );
        
        return new SmartFactoryContract(contractAddress, web3j, txManager, gasProvider);
    }
    
    /**
     * Get the contract owner
     */
    public RemoteFunctionCall<String> owner() {
        final Function function = new Function("owner",
                Collections.emptyList(),
                Collections.singletonList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }
    
    /**
     * Record a measurement
     */
    public RemoteFunctionCall<TransactionReceipt> recordMeasurement(
            String machineId, String timestamp, BigInteger setpoint, BigInteger actualValue) {
        
        final Function function = new Function(
                "recordMeasurement",
                Arrays.asList(
                        new Utf8String(machineId),
                        new Utf8String(timestamp),
                        new Uint256(setpoint),
                        new Uint256(actualValue)),
                Collections.emptyList());
        
        return executeRemoteCallTransaction(function);
    }
    
    /**
     * Record batch data
     */
    public RemoteFunctionCall<TransactionReceipt> recordBatchData(
            String machineId, String dataHash, String startTime, String endTime, BigInteger anomalyScore) {
        
        final Function function = new Function(
                "recordBatchData",
                Arrays.asList(
                        new Utf8String(machineId),
                        new Utf8String(dataHash),
                        new Utf8String(startTime),
                        new Utf8String(endTime),
                        new Uint256(anomalyScore)),
                Collections.emptyList());
        
        return executeRemoteCallTransaction(function);
    }
    
    /**
     * Get the latest measurement for a machine
     */
    public RemoteFunctionCall<Tuple3<String, BigInteger, BigInteger>> getLatestMeasurement(String machineId) {
        final Function function = new Function(
                "getLatestMeasurement",
                Collections.singletonList(new Utf8String(machineId)),
                Arrays.asList(
                        new TypeReference<Utf8String>() {},
                        new TypeReference<Uint256>() {},
                        new TypeReference<Uint256>() {}));
        
        return new RemoteFunctionCall<>(function, () -> {
            List<Type> result = executeCallMultipleValueReturn(function);
            return new Tuple3<>(
                    (String) result.get(0).getValue(),
                    (BigInteger) result.get(1).getValue(),
                    (BigInteger) result.get(2).getValue());
        });
    }
    
    /**
     * Simple tuple class for multiple return values
     */
    public static class Tuple3<T1, T2, T3> {
        private final T1 component1;
        private final T2 component2;
        private final T3 component3;
        
        public Tuple3(T1 component1, T2 component2, T3 component3) {
            this.component1 = component1;
            this.component2 = component2;
            this.component3 = component3;
        }
        
        public T1 component1() { return component1; }
        public T2 component2() { return component2; }
        public T3 component3() { return component3; }
    }
}